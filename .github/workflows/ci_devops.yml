name: DevOps & Green Metrics

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  unit-matrix:
    name: Unit (Py${{ matrix.py }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.py }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Tests fast (no emissions)
        env:
          API_TOKEN: devtoken
        run: pytest -q

  emissions:
    name: Emissions (install + tests)
    runs-on: ubuntu-latest
    needs: unit-matrix
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tracker & deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Track pip install
        run: |
          python tools/run_with_emissions.py --label install --outdir metrics-optimized -- pip install -r requirements.txt

      - name: Track tests (selective)
        env:
          API_TOKEN: devtoken
        run: |
          python tools/run_with_emissions.py --label tests --outdir metrics-optimized -- pytest -q

      - name: Upload emissions artifacts
        uses: actions/upload-artifact@v4
        with:
          name: metrics-optimized
          path: metrics-optimized/**

  docker-build-and-scan:
    name: Docker Build + SBOM + Scan
    runs-on: ubuntu-latest
    needs: unit-matrix
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ghcr.io/${{ github.repository_owner }}/green-devops:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-image
          path: /tmp/image.tar

      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: "docker-archive:/tmp/image.tar"
          format: "spdx-json"
          output-file: "sbom.spdx.json"

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          input: /tmp/image.tar
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH,MEDIUM

      - name: Upload Trivy SARIF
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif
          path: trivy-results.sarif

  performance:
    name: Performance (pytest-benchmark)
    runs-on: ubuntu-latest
    needs: unit-matrix
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run benchmark
        env:
          API_TOKEN: devtoken
        run: |
          pytest -k test_perf_create_and_list --benchmark-json=bench.json
      - name: Upload benchmark
        uses: actions/upload-artifact@v4
        with:
          name: benchmark
          path: bench.json

  report:
    name: Report (summary table)
    runs-on: ubuntu-latest
    needs: [emissions, performance]
    steps:
      - uses: actions/checkout@v4

      - name: Download metrics
        uses: actions/download-artifact@v4
        with:
          name: metrics-optimized
          path: metrics-optimized

      - name: Download benchmark
        uses: actions/download-artifact@v4
        with:
          name: benchmark
          path: .

      - name: Build report
        id: report
        shell: bash
        run: |
          mkdir -p reports
          INSTALL_KG=$(python - <<'PY'
import json,glob
j=json.load(open(glob.glob('metrics-optimized/summary_install.json')[0]))
print(j["emissions_kg"])
PY
)
          TESTS_KG=$(python - <<'PY'
import json,glob
j=json.load(open(glob.glob('metrics-optimized/summary_tests.json')[0]))
print(j["emissions_kg"])
PY
)
          echo "# Green DevOps Report (CI) — $(date -u +%Y-%m-%dT%H:%MZ)" > reports/green-devops_report.md
          echo "" >> reports/green-devops_report.md
          echo "## Emissions" >> reports/green-devops_report.md
          echo "" >> reports/green-devops_report.md
          echo "| Phase | CO₂e (kg) |" >> reports/green-devops_report.md
          echo "|------:|-----------:|" >> reports/green-devops_report.md
          echo "| Install | ${INSTALL_KG} |" >> reports/green-devops_report.md
          echo "| Tests | ${TESTS_KG} |" >> reports/green-devops_report.md
          echo "" >> reports/green-devops_report.md
          if [ -f bench.json ]; then
            AVG_NS=$(python - <<'PY'
import json; d=json.load(open('bench.json'))
# take first benchmark if many
b=next(iter(d["benchmarks"]))
print(b["stats"]["mean"])
PY
)
            echo "## Performance" >> reports/green-devops_report.md
            echo "" >> reports/green-devops_report.md
            echo f"Average roundtrip (sec): ${AVG_NS}" >> reports/green-devops_report.md
          fi
          echo "## Artifacts" >> reports/green-devops_report.md
          echo "- Emissions CSV/JSON: \`metrics-optimized/\`" >> reports/green-devops_report.md
          echo "- Benchmark JSON: \`bench.json\`" >> reports/green-devops_report.md
          echo "REPORT_PATH=reports/green-devops_report.md" >> $GITHUB_OUTPUT

      - name: Publish to job summary
        run: |
          echo "## Green DevOps — Emissions & Performance" >> $GITHUB_STEP_SUMMARY
          cat reports/green-devops_report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: green-devops-report
          path: reports/green-devops_report.md
